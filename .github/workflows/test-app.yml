name: Test Simple Web App

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'docker/**'
      - 'k8s/**'
      - 'package.json'
      - 'package-lock.json'
      - 'Dockerfile'
      - 'docker/Dockerfile'
      - '.github/workflows/test-app.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'docker/**'
      - 'k8s/**'
      - 'package.json'
      - 'package-lock.json'
      - 'Dockerfile'
      - 'docker/Dockerfile'
      - '.github/workflows/test-app.yml'
  workflow_dispatch:

concurrency:
  group: test-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  DOCKER_IMAGE: simple-web-app:test-${{ github.sha }}

permissions:
  contents: read

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint || echo "Linting not configured, skipping..."

      - name: Run tests
        run: npm test

      - name: Run security audit
        run: npm audit --audit-level=high

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: false
          tags: ${{ env.DOCKER_IMAGE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: Test Docker image startup
        run: |
          echo "Starting container..."
          docker run -d --name test-app -p 3000:3000 ${{ env.DOCKER_IMAGE }}
          
          echo "Waiting for application to start..."
          timeout=30
          while [ $timeout -gt 0 ]; do
            if curl -f -s http://localhost:3000/health > /dev/null 2>&1; then
              echo "Application is ready!"
              break
            fi
            echo "Waiting... ($timeout seconds remaining)"
            sleep 2
            timeout=$((timeout-2))
          done
          
          if [ $timeout -le 0 ]; then
            echo "Application failed to start within 30 seconds"
            docker logs test-app
            exit 1
          fi

      - name: Run application tests
        run: |
          echo "Testing health endpoint..."
          response=$(curl -s -w "%{http_code}" http://localhost:3000/health)
          if [[ "$response" != *"200" ]]; then
            echo "Health check failed: $response"
            exit 1
          fi
          echo "Health check passed"
          
          echo "Testing main endpoint..."
          response=$(curl -s -w "%{http_code}" http://localhost:3000/)
          if [[ "$response" != *"200" ]]; then
            echo "Main endpoint failed: $response"
            exit 1
          fi
          echo "Main endpoint test passed"
          
          echo "Testing application response content..."
          content=$(curl -s http://localhost:3000/)
          if [[ -z "$content" ]]; then
            echo "No content returned from main endpoint"
            exit 1
          fi
          echo "Content test passed"

      - name: Test Kubernetes manifests
        run: |
          echo "Validating Kubernetes manifests..."
          
          # Check if kubectl is available, install if not
          if ! command -v kubectl &> /dev/null; then
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
          fi
          
          # Validate manifests syntax
          for manifest in k8s/*.yaml; do
            if [ -f "$manifest" ]; then
              echo "Validating $manifest..."
              kubectl apply --dry-run=client -f "$manifest" || echo "Warning: $manifest validation failed"
            fi
          done

      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up test resources..."
          docker stop test-app 2>/dev/null || true
          docker rm test-app 2>/dev/null || true
          docker rmi ${{ env.DOCKER_IMAGE }} 2>/dev/null || true

      - name: Test Summary
        if: always()
        run: |
          echo "=== Test Summary ==="
          echo "Node.js version: ${{ env.NODE_VERSION }}"
          echo "Docker image: ${{ env.DOCKER_IMAGE }}"
          echo "Commit SHA: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Event: ${{ github.event_name }}" 