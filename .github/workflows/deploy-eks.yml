name: Deploy to EKS

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'docker/**'
      - 'k8s/**'
      - '.github/workflows/deploy-eks.yml'
  workflow_dispatch:
    branches: [ main ]

concurrency:
  group: eks-deployment
  cancel-in-progress: false

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: simple-web-app
  CLUSTER_NAME: simple-cluster
  NAMESPACE: default

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    name: Build and Deploy to EKS
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-githubactions-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }},${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Deploy to EKS
        run: |
          # Update the deployment with the new image
          kubectl set image deployment/simple-web-app app=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }} -n ${{ env.NAMESPACE }}
          
          # Wait for rollout to complete
          kubectl rollout status deployment/simple-web-app -n ${{ env.NAMESPACE }}

      - name: Verify deployment
        run: |
          kubectl get pods -l app=simple-web-app -n ${{ env.NAMESPACE }}
          kubectl get service simple-web-app-service -n ${{ env.NAMESPACE }}

      - name: Get application URL
        run: |
          EXTERNAL_IP=$(kubectl get service simple-web-app-service -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "Application URL: http://$EXTERNAL_IP"
          echo "url=http://$EXTERNAL_IP" >> $GITHUB_OUTPUT 