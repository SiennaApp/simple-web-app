name: Deploy to EKS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production
        - demo

concurrency:
  group: eks-deployment-${{ github.event_name == 'pull_request' && 'staging' || (github.event_name == 'push' && 'production') || github.event.inputs.environment }}
  cancel-in-progress: false

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: simple-web-app
  CLUSTER_NAME: simple-cluster

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    name: Build and Deploy to EKS
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine environment
        id: get_env
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-githubactions-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Deploy to EKS
        run: |
          # Replace the image tag in the deployment YAML
          sed -i "s|image:.*|image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}|g" k8s/deployment.yaml
          
          # Apply the Kubernetes manifests
          kubectl apply -f k8s/deployment.yaml -n ${{ steps.get_env.outputs.environment }}
          kubectl apply -f k8s/service.yaml -n ${{ steps.get_env.outputs.environment }}
          
          # Wait for rollout to complete
          kubectl rollout status deployment/simple-web-app -n ${{ steps.get_env.outputs.environment }}

      - name: Verify deployment
        run: |
          kubectl get pods -l app=simple-web-app -n ${{ steps.get_env.outputs.environment }}
          kubectl get service simple-web-app-service -n ${{ steps.get_env.outputs.environment }}

      - name: Get application URL
        id: get_url
        run: |
          EXTERNAL_IP=$(kubectl get service simple-web-app-service -n ${{ steps.get_env.outputs.environment }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "Application URL: http://$EXTERNAL_IP"
          echo "url=http://$EXTERNAL_IP" >> $GITHUB_OUTPUT 